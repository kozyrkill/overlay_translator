#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ X11 –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ overlay –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
"""

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, GLib
import os
import subprocess
import time

def check_x11_session():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —Å–µ—Å—Å–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å X11"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ X11 —Å–µ—Å—Å–∏–∏ ===")
    
    session_type = os.environ.get('XDG_SESSION_TYPE', 'unknown')
    display = os.environ.get('DISPLAY', 'unknown')
    
    print(f"–¢–∏–ø —Å–µ—Å—Å–∏–∏: {session_type}")
    print(f"DISPLAY: {display}")
    
    if session_type.lower() == 'x11':
        print("‚úÖ X11 —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        return True
    elif session_type.lower() == 'wayland':
        print("‚ö†Ô∏è  Wayland —Å–µ—Å—Å–∏—è - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        return False
    else:
        print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏")
        return False

def check_x11_tools():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å X11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ X11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
    
    tools = [
        ("xprop", ["xprop", "-version"]),
        ("xwininfo", ["xwininfo", "-version"]),
        ("xrandr", ["xrandr", "--version"]),
        ("xset", ["xset", "-version"])
    ]
    
    available_tools = []
    for tool_name, cmd in tools:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"‚úÖ {tool_name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                available_tools.append(tool_name)
            else:
                print(f"‚ùå {tool_name} - –æ—à–∏–±–∫–∞: {result.stderr}")
        except FileNotFoundError:
            print(f"‚ùå {tool_name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {tool_name} - —Ç–∞–π–º–∞—É—Ç")
        except Exception as e:
            print(f"‚ùå {tool_name} - –æ—à–∏–±–∫–∞: {e}")
    
    return available_tools

def test_window_attributes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å X11 –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç X11 –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–∫–Ω–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    window = Gtk.Window(type=Gtk.WindowType.POPUP)
    window.set_decorated(False)
    window.set_app_paintable(True)
    window.set_accept_focus(False)
    window.set_keep_above(True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º X11 –∞—Ç—Ä–∏–±—É—Ç—ã
    window.set_skip_taskbar_hint(True)
    window.set_skip_pager_hint(True)
    window.set_type_hint(Gdk.WindowTypeHint.UTILITY)
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª
    label = Gtk.Label(label="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å X11 –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏")
    label.set_markup('<span foreground="white" background="black" font_desc="16">–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å X11 –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏</span>')
    window.add(label)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
    window.set_default_size(300, 100)
    window.move(100, 100)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    window.show_all()
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å X11 –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–∫–Ω–æ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∫–æ–Ω")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    input()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    print(f"Skip taskbar: {window.get_skip_taskbar_hint()}")
    print(f"Skip pager: {window.get_skip_pager_hint()}")
    print(f"Type hint: {window.get_type_hint()}")
    print(f"Accept focus: {window.get_accept_focus()}")
    print(f"Keep above: {window.get_keep_above()}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    window.destroy()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")

def test_screenshot_tools():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ===")
    
    tools = [
        ("gnome-screenshot", ["gnome-screenshot", "--version"]),
        ("scrot", ["scrot", "--version"]),
        ("import (ImageMagick)", ["import", "-version"]),
        ("xwd", ["xwd", "-help"]),
        ("xwd", ["xwd", "-version"])
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:")
    available_tools = []
    for tool_name, cmd in tools:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"‚úÖ {tool_name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                available_tools.append(tool_name)
            else:
                print(f"‚ùå {tool_name} - –æ—à–∏–±–∫–∞: {result.stderr}")
        except FileNotFoundError:
            print(f"‚ùå {tool_name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {tool_name} - —Ç–∞–π–º–∞—É—Ç")
        except Exception as e:
            print(f"‚ùå {tool_name} - –æ—à–∏–±–∫–∞: {e}")
    
    return available_tools

def test_x11_properties():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç X11 —Å–≤–æ–π—Å—Ç–≤–∞ –æ–∫–Ω–∞"""
    print("\n=== –¢–µ—Å—Ç X11 —Å–≤–æ–π—Å—Ç–≤ ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
        window = Gtk.Window(type=Gtk.WindowType.POPUP)
        window.set_decorated(False)
        window.set_app_paintable(True)
        window.set_accept_focus(False)
        window.set_keep_above(True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º X11 –∞—Ç—Ä–∏–±—É—Ç—ã
        window.set_skip_taskbar_hint(True)
        window.set_skip_pager_hint(True)
        window.set_type_hint(Gdk.WindowTypeHint.UTILITY)
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª
        label = Gtk.Label(label="–¢–µ—Å—Ç X11 —Å–≤–æ–π—Å—Ç–≤")
        label.set_markup('<span foreground="white" background="red" font_desc="14">–¢–µ—Å—Ç X11 —Å–≤–æ–π—Å—Ç–≤</span>')
        window.add(label)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
        window.set_default_size(250, 80)
        window.move(150, 150)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        window.show_all()
        
        print("‚úÖ –û–∫–Ω–æ —Å X11 —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç - —ç—Ç–æ –æ–∫–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –Ω–µ–≥–æ")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        input()
        
        # –ü–æ–ª—É—á–∞–µ–º Gdk.Window –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        gdk_window = window.get_window()
        if gdk_window:
            print("‚úÖ Gdk.Window –ø–æ–ª—É—á–µ–Ω")
            print(f"Skip taskbar: {gdk_window.get_skip_taskbar_hint()}")
            print(f"Skip pager: {gdk_window.get_skip_pager_hint()}")
            # get_keep_above –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö GTK
            try:
                print(f"Keep above: {gdk_window.get_keep_above()}")
            except AttributeError:
                print("Keep above: –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ GTK")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Gdk.Window")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        window.destroy()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è X11 —Å–≤–æ–π—Å—Ç–≤: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç X11 –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ overlay –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º X11 —Å–µ—Å—Å–∏—é
        is_x11 = check_x11_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º X11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        x11_tools = check_x11_tools()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–∫–Ω–∞
        test_window_attributes()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º X11 —Å–≤–æ–π—Å—Ç–≤–∞
        test_x11_properties()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshot_tools = test_screenshot_tools()
        
        print("\n" + "=" * 60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"X11 —Å–µ—Å—Å–∏—è: {'‚úÖ –î–∞' if is_x11 else '‚ùå –ù–µ—Ç'}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö X11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(x11_tools)}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshot_tools)}")
        
        if is_x11:
            print("\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("- X11 —Å–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
            print("- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ª—é–±—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º")
        else:
            print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("- Wayland —Å–µ—Å—Å–∏—è - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ X11")
            print("- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ overlay")
        
    except KeyboardInterrupt:
        print("\n\n–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
